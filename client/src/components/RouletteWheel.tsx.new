import React, { useState, useEffect, useRef } from "react";
import { calculateWheelRotation } from "@/lib/roulette";
import type { ResultColor, SpinResult } from "@/lib/roulette";

interface RouletteWheelProps {
  isSpinning: boolean;
  resultColor: ResultColor | null;
  result: SpinResult | null;
  resultMessage: string;
}

interface RouletteSlot {
  color: "violet" | "black" | "blue";
}

export default function RouletteWheel({
  isSpinning,
  resultColor,
  result,
  resultMessage,
}: RouletteWheelProps) {
  const wheelRef = useRef<HTMLDivElement>(null);
  const wheelContainerRef = useRef<HTMLDivElement>(null);
  const lightBeamRef = useRef<HTMLDivElement>(null);
  const [rotation, setRotation] = useState(0);
  const [wheelSize, setWheelSize] = useState(300);
  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);
  
  // Générer nos slots
  const generateSlots = (): RouletteSlot[] => {
    const slots: RouletteSlot[] = [];
    // 16 violet, 16 black, 1 blue
    for (let i = 0; i < 32; i++) {
      slots.push({
        color: i % 2 === 0 ? "violet" : "black"
      });
    }
    // Ajouter le slot bleu à la fin
    slots.push({ color: "blue" });
    return slots;
  };
  
  const slots = generateSlots();
  
  // Adapter la taille de la roue à l'écran
  useEffect(() => {
    const updateWheelSize = () => {
      const width = window.innerWidth;
      if (width < 640) { // mobile
        setWheelSize(250);
      } else if (width < 1024) { // tablet
        setWheelSize(300);
      } else { // desktop
        setWheelSize(350);
      }
    };

    updateWheelSize();
    window.addEventListener('resize', updateWheelSize);
    return () => window.removeEventListener('resize', updateWheelSize);
  }, []);
  
  // Handle wheel spinning animation
  useEffect(() => {
    if (!isSpinning || !resultColor) return;
    
    // Get rotation based on result
    const extraSpins = 5; // Ajouter quelques rotations supplémentaires
    const baseRotation = calculateWheelRotation(resultColor);
    const targetRotation = rotation + (360 * extraSpins) + baseRotation;
    
    // Apply spinning animation
    setRotation(targetRotation);
    
    // Animate selection indicator
    let currentIndex = 0;
    const intervalTime = 100; // Start fast
    let currentInterval = intervalTime;
    
    const animateSelection = () => {
      setSelectedIndex(currentIndex);
      currentIndex = (currentIndex + 1) % slots.length;
      
      // Gradually slow down the selection animation
      currentInterval *= 1.05;
      
      if (currentInterval < 500) { // Keep animating until we reach a slower speed
        setTimeout(animateSelection, currentInterval);
      } else {
        // Final selection - trouver l'index basé sur resultColor
        let finalIndex = 0;
        if (resultColor === "violet") {
          finalIndex = 0; // Premier slot violet
        } else if (resultColor === "black") {
          finalIndex = 1; // Premier slot noir
        } else if (resultColor === "blue") {
          finalIndex = slots.length - 1; // Le slot bleu à la fin
        }
        
        setTimeout(() => {
          setSelectedIndex(finalIndex);
        }, 500);
      }
    };

    if (isSpinning) {
      animateSelection();
    }
  }, [isSpinning, resultColor, rotation, slots.length]);
  
  return (
    <div className="relative mx-auto" style={{ width: wheelSize, height: wheelSize }}>
      {/* Outer decorative ring */}
      <div className="absolute w-full h-full rounded-full border-[10px] sm:border-[12px] border-[#1E1A3C] bg-[#2D2654] shadow-[inset_0_0_60px_rgba(138,43,226,0.3),0_0_100px_rgba(138,43,226,0.2)] transform transition-transform duration-5000 ease-out overflow-hidden">
        {/* Metallic effect overlay */}
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,rgba(255,255,255,0.1)_0%,transparent_70%)]" />
        <div className="absolute inset-0 bg-[linear-gradient(45deg,transparent_45%,rgba(255,255,255,0.1)_50%,transparent_55%)]" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(138,43,226,0.2)_0%,transparent_60%)]" />
      </div>

      {/* Selection indicator */}
      <div className="absolute top-0 left-1/2 -translate-x-1/2 w-8 h-12 z-10">
        <div className="w-full h-full bg-gradient-to-b from-yellow-400 to-yellow-600 clip-triangle shadow-lg relative">
          <div className="absolute inset-0 opacity-40 bg-[linear-gradient(180deg,rgba(255,255,255,0.8)_0%,transparent_60%)]"></div>
        </div>
      </div>

      {/* Main wheel */}
      <div 
        ref={wheelRef}
        className="absolute w-[85%] h-[85%] top-[7.5%] left-[7.5%] rounded-full bg-[#1E1A3C] shadow-[inset_0_0_30px_rgba(0,0,0,0.7)] transform transition-all duration-5000 ease-out overflow-hidden"
        style={{ transform: `rotate(${rotation}deg)` }}
      >
        {/* Texture effect */}
        <div className="absolute inset-0 opacity-20 bg-[repeating-radial-gradient(circle_at_center,#4A4063,#2D2654_2px,#1E1A3C_3px,#2D2654_4px)]" />
        
        {slots.map((slot, index) => {
          const angle = (index * 360) / slots.length;
          const isSelected = selectedIndex === index;
          return (
            <div
              key={index}
              className="absolute w-full h-full"
              style={{
                transform: `rotate(${angle}deg)`,
              }}
            >
              <div
                className={`absolute h-[45%] w-[calc(2vmin+1.5rem)] -ml-[calc(1vmin+0.75rem)] left-1/2 top-0
                  ${slot.color === 'violet' 
                    ? 'bg-gradient-to-b from-[#8A2BE2] to-[#6A1BA2]' 
                    : slot.color === 'black' 
                      ? 'bg-gradient-to-b from-gray-800 to-gray-900' 
                      : 'bg-gradient-to-b from-[#43528b] to-[#2A3456]'}
                  ${isSelected ? 'ring-2 ring-yellow-400 ring-opacity-75 shadow-[0_0_15px_rgba(234,179,8,0.5)]' : ''}
                  shadow-[inset_0_0_10px_rgba(0,0,0,0.5)]
                  border-x border-[rgba(255,255,255,0.1)]
                  transition-all duration-100`}
              >
                <div className="absolute inset-0 bg-[linear-gradient(90deg,rgba(255,255,255,0.1),transparent_50%,rgba(255,255,255,0.1))]" />
              </div>
            </div>
          );
        })}

        {/* Center decoration */}
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[25%] h-[25%] rounded-full bg-gradient-to-br from-[#2D2654] to-[#1E1A3C] shadow-[inset_0_0_20px_rgba(0,0,0,0.5),0_0_30px_rgba(138,43,226,0.3)] border-4 border-[#4A4063] flex items-center justify-center overflow-hidden">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(138,43,226,0.3)_0%,transparent_70%)]" />
          <div className="text-[min(3vmin,1.5rem)] font-bold text-white text-shadow tracking-wider z-10">SEPOLIA</div>
        </div>
      </div>
      
      {/* Light beam container */}
      <div ref={lightBeamRef} className="absolute inset-0">
        {/* Light beams will be generated here */}
        {isSpinning && (
          <>
            <div className="absolute inset-0 animate-pulse bg-[radial-gradient(circle_at_center,rgba(138,43,226,0.2)_0%,transparent_70%)]" />
            <div className="absolute inset-0 animate-pulse delay-300 bg-[radial-gradient(circle_at_center,rgba(138,43,226,0.15)_0%,transparent_60%)]" />
          </>
        )}
      </div>
    </div>
  );
}